{"config":{"lang":["en","nl"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Fri3d Camp 2024 Badge","text":"<p>So you got a cool badge, what can you do with it? ;-)</p>"},{"location":"#play-with-it","title":"Play with it","text":"<p>You don't need to be a programming wizard to have fun with this badge! Go to the Onboarding pages to see all the cool features we built into the standard firmware.</p> <p></p>"},{"location":"#program-it","title":"Program it","text":"<p>Congratulations! If you want to squash some bugs, you're going to need some tools...</p> <p></p> <ul> <li>You can use C++ in the Arduino editor, or Visual Studio Code</li> <li>If you prefer Python, you can use any plain text editor, but Visual Studio Code works too.</li> <li>If you are into homeassistant and want to connect your badge using esphome. You can either use the command line or esphome dashboard.</li> <li>If typing code is not your thing, you can drag blocks in bipes</li> </ul>"},{"location":"#revert-to-default-firmware","title":"Revert to Default Firmware","text":"<p>See how to reset</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>The introduction: https://github.com/Fri3dCamp/badge_2024</li> <li>The hardware: https://github.com/Fri3dCamp/badge_2024_hw</li> <li>C++ examples: https://github.com/Fri3dCamp/badge_2024_arduino</li> <li>pre-loaded Firmware: https://github.com/Fri3dCamp/badge_2024_micropython</li> </ul>"},{"location":"reset/","title":"Flashing","text":"<p>After your adventures in programming yielded unexpected results, you might want to go back to the default firmware.</p>"},{"location":"reset/#fri3d-camp-reset-booth","title":"Fri3d Camp Reset Booth","text":"<p>During the Fri3d Camp, at the \"Badge EHBO\", we can help you! Look around for a \"badge reset firmware\" booth on the Fri3d camp. We sort of anticipated this ... :-)</p>"},{"location":"reset/#web-interface","title":"Web interface","text":"<p>The online flasher app works with chrome based browsers (Chrome, Edge) (not Firefox, Safari).</p> <ol> <li>download latest zip file from https://github.com/tomvanbraeckel/retro-go-fri3d/releases</li> <li>go to https://fri3d-flasher.vercel.app/</li> <li>click on icon to upload the zip file you downloaded earlier</li> <li>click \"begin te flashen\" button</li> </ol> <p>If the flashing fails because your badge keeps resetting, you can force every ESP32-based board as follows:     11. press and hold \"start\" button (this is the \"boot\" button of the microcontroller)     12. press and release \"reset\" button     13. your badge will now be ready to be flashed with a new program</p> <p>Now the device should boot into the Fri3d App.</p>"},{"location":"reset/#esp-idf","title":"ESP-IDF","text":"<p>This is the complicated version. Only worth it if the web flasher failed.</p> <ol> <li>if your badge seems to reset every few seconds, You can force every ESP32-based board as follows:<ol> <li>press and hold \"start\" button (this is the \"boot\" button of the microcontroller)</li> <li>press and release \"reset\" button</li> <li>your badge will now be ready to be flashed with a new program</li> </ol> </li> <li>install ESP-IDF https://docs.espressif.com/projects/esp-idf/en/stable/esp32/get-started/index.html#installation</li> <li>download the latest firmware from https://github.com/Fri3dCamp/badge_2024_micropython</li> <li>on your command line interface type:<pre><code>python -m esptool -p (PORT) -b 460800 --before default_reset --after no_reset --chip esp32s3 write_flash --flash_mode dio --flash_size 16MB --flash_freq 80m 0x0 bootloader.bin 0x8000 partition-table.bin 0x1d000 ota_data_initial.bin 0x30000 micropython.bin\n</code></pre> </li> </ol>"},{"location":"arduino/","title":"Index","text":"<p>download the Arduino IDE from https://www.arduino.cc/en/software</p>"},{"location":"arduino/#arduino-ide-setup-steps","title":"Arduino IDE setup steps","text":"<p>For the Fri3d badge to be usable in the Arduino IDE, you need to install version 2.0.17 of the esp32 board package. Below are the steps:</p>"},{"location":"arduino/#general-arduino-ide-setup","title":"General Arduino IDE Setup","text":"<ul> <li>From the Tools Menu, select Boards -&gt; Boards Manager in the Arduino IDE, then install version 2.0.17 of the esp32 package.</li> <li>Reason for version 2.0.17 is that I tried version 3.0.2 and version 3.0.2 causes compilation errors for the ESP32S3 board.</li> <li>From the Tools Menu, select Board -&gt; esp32 -&gt; ESP32S3 Dev Module</li> </ul>"},{"location":"arduino/#how-to-upload-in-arduino-ide","title":"How to Upload in Arduino IDE","text":"<ul> <li>Turn on your badge</li> <li>connect your badge via usb to your computer</li> <li>From the Tools Menu, select Port and select the entry that looks like it might be your badge.</li> <li>Click the Upload Button (right pointing arrow button in green)</li> </ul>"},{"location":"bipes/","title":"BIPES documentation","text":""},{"location":"communicator/","title":"Communicator add-on","text":""},{"location":"communicator/#communicator-features","title":"Communicator features","text":"<p>The communicator is built around :</p> <ul> <li>backlit QWERTY Keyboard designed by Solder Party</li> <li>RISC-V based microcontroller board LANA TNY</li> <li>TDK ICS43434 microphone</li> <li>Analog Devices MAX98357A DAC with amplifier</li> <li>small speaker.</li> </ul> <p>You can also use the keyboard as an USB keyboard, however do not plug in the USB cable when it's connected to the badge!</p> <p>You can get the design files and sources in the GitHub repository</p> <p></p>"},{"location":"communicator/#step-by-step-assembly-guide","title":"Step by step assembly guide","text":""},{"location":"communicator/#all-components-neatly-packaged","title":"All components neatly packaged","text":"<p>The package you received contains everything you need to build your own communicator add-on</p> <ul> <li>Communicator main PCB</li> <li>Pink cover PCB</li> <li>4 x 16mm long spacers</li> <li>4 x 2mm long spacers</li> <li>speaker</li> <li>silicone keyboard</li> <li>2 x 6 pin extra long headers</li> </ul> <p></p>"},{"location":"communicator/#mount-the-speaker","title":"Mount the speaker","text":"<p>Remove the protective layer and glue the speaker on the PCB. Solder the 2 wire on the pads, the red wire should go the the pad marked with a <code>+</code> symbol.</p> <p> </p>"},{"location":"communicator/#solder-the-long-pin-headers","title":"Solder the long pin headers","text":"<p>Place the headers on the side of the component side of the board. You can use a female pin header (of even the badge) to keep the 2 pin headers properly aligned while soldering</p> <p></p>"},{"location":"communicator/#mount-the-keys","title":"Mount the keys","text":"<p>Snap in the 2mm spacers in the pink cover. place the silicone keyboard in the PCB and snap in into the communicator PCB.</p> <p> </p>"},{"location":"communicator/#mount-the-communicator","title":"Mount the communicator","text":"<p>Snap in the 16mm long spacers in the 4 holes, mount it on the back of the badge in place of the protective backplate.</p> <p> </p>"},{"location":"communicator/#usage","title":"Usage","text":"<p>The keyboard presents itself as a HID input device. The <code>Fn</code> key can be used to trigger special functions:</p> <ul> <li><code>Fn+Red Square</code>: Put LANA LED to red</li> <li><code>Fn+Orange Triangle</code>: Put LANA LED to orange</li> <li><code>Fn+Yellow Fri3d logo</code>: Put LANA LED to yellow</li> <li><code>Fn+Green Circle</code>: Put LANA LED to green</li> <li><code>Fn+Blue Three-Leaf-Clover</code>: Put LANA LED to blue</li> <li><code>Fn+Purple Rhombus</code>: Put LANA LED to purple</li> <li><code>Fn+Solder Party</code>: Put LANA LED off</li> <li><code>Fn+Backspace</code>: Delete</li> <li><code>Fn+Up</code>: Page Up</li> <li><code>Fn+Down</code>: Page Down</li> <li><code>Fn+Left</code>: Home</li> <li><code>Fn+Right</code>: End</li> <li><code>Fn+Spacebar</code>: Toggle keyboard backlight</li> <li><code>Fn+Right Shift</code>: Toggle Caps Lock</li> </ul>"},{"location":"communicator/#firmware-features","title":"Firmware features","text":"<p>The firmware outputs HID report packets (8 bytes) on USB, I2C (address <code>0x38</code>) and UART.</p> <p>The first byte indicates the modifier keys that have been pressed:</p> Bit Modifier Key 0 LEFT CTRL 1 LEFT SHIFT 2 LEFT ALT 3 LEFT GUI 4 RIGHT CTRL 5 RIGHT SHIFT 6 RIGHT ALT 7 RIGHT GUI <p>The second byte is reserved, the remaining 6 bytes can contain a HID keycode.</p>"},{"location":"esphome/","title":"ESPHome documentation","text":"<p>This page contains reference code for each badge component. It currently assumes you have esphome installed and are familiar adding a device.</p>"},{"location":"esphome/#common-code","title":"Common code","text":"<pre><code>substitutions:\n  esphome_name: fri3d2024\n\nesphome:\n  name: ${esphome_name}\n\nesp32:\n  board: esp32-s3-devkitc-1\n  framework:\n    type: arduino\n</code></pre>"},{"location":"esphome/#display","title":"Display","text":"<pre><code>spi:\n  clk_pin: GPIO7\n  mosi_pin: GPIO6\n\ndisplay:\n  - platform: ili9xxx\n    model: ST7789V\n    dimensions:\n      height: 240\n      width: 296\n    transform:\n      swap_xy: true\n      mirror_x: false\n    data_rate: 80MHz\n    dc_pin: GPIO4\n    cs_pin: GPIO5\n    reset_pin: GPIO48\n    auto_clear_enabled: false\n    lambda: |-\n      it.image(0, 0, id(my_image));\n#      it.print(0, 0, id(my_font), \"Hello World!\");\n#      it.printf(0, 15, id(my_font), TextAlign::BASELINE_LEFT, \"%.1f graden\", id(temperature).state);\n# sensor.living_room_temperature\n#      it.line(0, 0, 50, 50);\n\nfont:\n  - file: \"opensans.ttf\"\n    id: my_font\n    size: 20\n\nimage:\n  - file: \"fri3d.png\"\n    id: my_image\n    type: RGB24\n</code></pre> <p>TODO</p> <ul> <li>refresh log error</li> </ul>"},{"location":"esphome/#status-light","title":"Status light","text":"<pre><code>light:\n  - platform: status_led\n    name: \"State\"\n    id: \"state\"\n    pin: GPIO21\n</code></pre>"},{"location":"esphome/#rgb-leds","title":"RGB leds","text":"<pre><code>light:\n  - platform: neopixelbus\n    type: GRB\n    variant: WS2812\n    pin: GPIO12\n    num_leds: 5\n    name: \"NeoPixel Light\"\n</code></pre>"},{"location":"esphome/#buttons","title":"Buttons","text":"<pre><code>binary_sensor:\n  - platform: gpio\n    pin:\n      number: GPIO39\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n    name: \"A\"\n  - platform: gpio\n    pin:\n      number: GPIO40\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n    name: \"B\"\n  - platform: gpio\n    pin:\n      number: GPIO38\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n    name: \"X\"\n  - platform: gpio\n    pin:\n      number: GPIO41\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n    name: \"Y\"\n  - platform: gpio\n    pin:\n      number: GPIO45\n      mode:\n        input: true\n        pullup: true\n      inverted: true\n    name: \"menu\"\n  - platform: gpio\n    pin:\n      number: GPIO0\n      mode:\n        input: true\n        #pullup: true\n      inverted: true\n    name: \"start\"\n</code></pre>"},{"location":"esphome/#joystick","title":"Joystick","text":"<pre><code>sensor:\n  - platform: adc\n    id: joystick_x\n    name: \"Joystick X axis\"\n    pin: GPIO01\n    internal: True\n    attenuation: auto\n    update_interval: 500ms\n\n  - platform: adc\n    id: joystick_y\n    name: \"Joystick Y axis\"\n    pin: GPIO03\n    internal: True\n    attenuation: 11db\n    update_interval: 500ms\n</code></pre> <p>TODO</p> <ul> <li>disable logging</li> <li>on_xxx: left/right &amp; up/down</li> </ul>"},{"location":"esphome/#buzzer","title":"Buzzer","text":"<p>TODO</p> <ul> <li>test</li> </ul>"},{"location":"esphome/#accelerometer","title":"Accelerometer","text":"<pre><code>i2c:\n  sda: GPIO9\n  scl: GPIO18\n  scan: true\n  id: bus_i2c\n</code></pre> <p>TODO</p> <ul> <li>contribute code &amp; test</li> </ul>"},{"location":"esphome/#ir-receiver","title":"IR Receiver","text":"<pre><code>remote_receiver:\n  pin:\n    number: GPIO11\n    inverted: true\n    mode:\n      input: true\n      pullup: true\n  dump: all\n</code></pre> <p>TODO</p> <ul> <li>test</li> </ul>"},{"location":"esphome/#battery-monitor","title":"Battery monitor","text":"<p>TODO</p> <ul> <li>test</li> </ul>"},{"location":"esphome/#aux-power","title":"AUX power","text":"<p>TODO</p> <ul> <li>test</li> </ul>"},{"location":"esphome/#sd-card","title":"SD Card","text":"<p>TODO</p> <ul> <li>define use case</li> </ul>"},{"location":"flamingo/","title":"Big Flamingo Gun 9000","text":""},{"location":"flamingo/#features","title":"Features","text":"<p>The flamingo blaster is built around basic components: </p> <ul> <li>an IR LED </li> <li>2 IR receivers</li> <li>4 WS2812 LEDs </li> <li>RISC-V based microcontroller board LANA TNY</li> </ul> <p>Do not plug in the USB cable when it's connected to the badge!</p> <p></p>"},{"location":"flamingo/#step-by-step-assembly-guide","title":"Step by step assembly guide","text":""},{"location":"flamingo/#all-components-neatly-packaged","title":"All components neatly packaged","text":"<p>The package you received has everything you need to build your own flamingo blaster.</p> <ul> <li>1 IR LED</li> <li>1 team selector switch</li> <li>1 large blue capacitor</li> <li>1 buzzer</li> <li>1 trigger pushbutton</li> <li>1 long strip of pin headers (to be split in half)</li> <li>1 single pin header</li> <li>1 MOSFET</li> <li>1 LANA TNY</li> <li>1 pink PCB</li> <li>1 badge link cable</li> <li>2 IR receivers</li> <li>2 resistors</li> <li>2 badge link connectors</li> <li>3 yellow capacitors (100nF)</li> <li>4 WS2812 LEDs</li> </ul> <p></p>"},{"location":"flamingo/#start-soldering","title":"Start soldering","text":"<p>There is no bad order in which to solder the parts, we dop however suggest starting with the lowest profile parts first. </p>"},{"location":"flamingo/#resistors","title":"Resistors","text":"<p>The package contains a larger 33R resistor and a smaller 1k resistor. </p> <p></p>"},{"location":"flamingo/#team-switch-and-speaker","title":"Team switch and speaker","text":"<p>The next components with a low profile are the buzzer and the team switch. Mount the switch with the actuator facing away from the PCB.</p> <p></p>"},{"location":"flamingo/#ir-led","title":"IR LED","text":"<p>The infrared LED does have a polarity. Mounting it the wrong way around results in a non-functional blaster. The long lead of the LED should go in the square hole with the <code>+</code> symbol next to it. Make sure you leave some room in order to bend te LED forward (or even better, bend it before soldering it!)</p> <p></p> <p></p>"},{"location":"flamingo/#ir-receivers","title":"IR receivers","text":"<p>The 2 IR receivers mount directions are indicated by an arrow. This arrow points towards the direction the pins should go.</p> <p></p> <p></p>"},{"location":"flamingo/#rgb-leds","title":"RGB LEDs","text":"<p>The RGB LEDs have 4 leads, the longest lead should go in the hole marked with the letter <code>c</code> . Once inserted, bend the LED before soldering. This allows you to slightly adjust the alignment before fixing them in place.</p> <p></p> <p></p>"},{"location":"flamingo/#trigger-button","title":"Trigger button","text":"<p>If you're right handed, solder the trigger switch on the side with all the other components. </p> <p></p>"},{"location":"flamingo/#lana-tny-module","title":"LANA TNY module","text":"<p>Use the large and single pin header to solder the LANA TNY module. Break the long pin header in 2 for the sides. Place the pins in the flamingo and align the LANA module on top of it. Alternate soldering the pins to prevent the pin header melting.</p> <p></p> <p></p>"},{"location":"flamingo/#condesators","title":"Condesators","text":"<p>The large blue condesator, just as the IR LED, has a long lead indicating the anode of this part. This longer lead should go in the hole marked with the <code>+</code> pin.</p> <p>The smaller yellow condensators can be mounted either way.</p> <p></p> <p></p>"},{"location":"flamingo/#badge-link-connector","title":"Badge link connector","text":"<p>Last part is the badge link connector. This 3.5mm audio jack is soldered on the same side as all the other components</p> <p></p>"},{"location":"flamingo/#finished-blaster","title":"Finished blaster","text":"<p>If everything goes according to plan you should now have a functional blaster.</p> <p></p>"},{"location":"flamingo/#mount-the-connector-on-your-badge","title":"Mount the connector on your badge","text":"<p>Now all that is left to do is adding the badge link connector to your badge. Mount this connector on the back side of badge (the same side as the wireless module and battery).</p> <p></p> <p></p> <p>Make sure there is no short circuit between the single pin and the decorative design on the badge!</p> <p></p>"},{"location":"flamingo/#notes","title":"Notes","text":"<p>Firmware updates can be flashed through the badge flash station in the solder area.</p> <p>Hardware design files and Firmware sources can be found in the GitHub repository.</p>"},{"location":"flamingo/programming/","title":"Programming","text":"<p>To program the blaster (flamingo) you can use mounriver IDE or embeetle. The first is an ide based on eclipse released by the chipmaker WCH. This works on windows and there is a version for linux and I think mac but the last 2 are a bit behind. Mounriver also gives false reports of viruses on many systems and violates the gpl license conditions of eclipse. A nicer alternative is embeetle https://embeetle.com/. this is an IDE of Belgian make. This is not open source but does produce an open toolchain when creating a new project. Lana can be programmed with embeetle via the usb connector but also with the wchlink module, this gives extra debugging options. The makers of embeetle have also been so kind to add the LANA board and very nice documentation. https://embeetle.com/#supported-hardware/wch/boards/lana-tny-01 . If you are going to work with the blaster/LANA TNY yourself, you have to pay attention to 1 thing (regardless of the ide) that is that LANA does not have an external clock and must use the internal clock (HSI), this is also stated in the default sketch of embeetle. If you accidentally \"brick\" your LANA board, you can usually unbrick it via USB or by using the power reset feature of the wchisptool.</p>"},{"location":"micropython/","title":"MicroPython documentation","text":""},{"location":"micropython/#flash-the-default-fri3d-micropython-firmware","title":"Flash the default fri3d micropython firmware","text":"<p>download firmware from https://github.com/cheops/fri3d-ota/tree/main/ota/fri3d_badge_2024 select the version and then the <code>*.zip</code> file in that folder</p> <p>flasher app  https://fri3d-flasher.vercel.app/#/</p> <p>If your download fails, you might have more success if you put the badge in DOWNLOAD mode manually: - PRESS + HOLD the START button - PRESS the RESET button (while HOLDING the START button) - the badge has now restarted in download mode</p> <p>after the download you might need to reset the badge to boot normally (PRESS the RESET button)</p>"},{"location":"micropython/#how-to-run-a-local-file","title":"How to run a local file","text":"<p>Install <code>mpremote</code> howto</p> <p>TLDR; <code>pip install mpremote</code></p> <p><pre><code>mpremote resume run local_test_file.py\n</code></pre> Unfortunately <code>Thonny</code> interrupts the startup of the badge when connecting, leaving some items (spi, display) in an undefined state. The same for <code>mpremote</code> if not supplied with the <code>resume</code> argument.</p>"},{"location":"micropython/#how-to-copy-a-file-to-the-badge","title":"how to copy a file to the badge","text":"<pre><code>mpremote resume fs cp local_path/file.jpg :file.jpg\n</code></pre>"},{"location":"micropython/#micropython-libraries","title":"Micropython libraries","text":"<p>Micropython quick reference for the esp32</p> <p>Micropython standard libraries overview doc</p> <p>The badge has lvgl built-in.</p> <p>Buttons demo demo_buttons.py</p> <p>Joystick demo demo_joystick.py</p> <p>Other interesting links - https://github.com/peterhinch/micropython-samples - https://github.com/mcauser/awesome-micropython</p>"},{"location":"micropython/#micropython-game-ideas","title":"micropython game ideas","text":"<ul> <li>https://hackaday.com/2021/05/25/simple-micropython-game-is-a-30-minute-game-dev-course/</li> <li>pinball link1 or link2</li> <li>gameESP</li> <li>snake</li> </ul>"},{"location":"micropython/lvgl/","title":"LVGL","text":"<p>badge_2024_micropython is build with LVLG v9.1 included</p>"},{"location":"micropython/lvgl/#links","title":"links","text":"<ul> <li>lvgl homepage https://lvgl.io/</li> <li>lvgl documentation https://docs.lvgl.io/9.1/</li> </ul>"},{"location":"micropython/lvgl/#python-examples-v84","title":"python examples (v8.4)","text":"<p>Unfortunately for v9.x the python examples are not available any more This are the main differences between v8.x and v9.x https://docs.lvgl.io/9.0/CHANGELOG.html and more specific https://docs.lvgl.io/9.0/CHANGELOG.html#general-api-changes - lvgl live python examples (v8.4) https://docs.lvgl.io/8.4/examples.html - lvgl python examples source code (v8.4) (search for *.py files) https://github.com/lvgl/lvgl/tree/v8.4.0/examples</p>"},{"location":"micropython/lvgl/#online-simulator","title":"online simulator","text":"<p>There is an online micropython + lvgl (v9.0) simulator available https://sim.lvgl.io/v9.0/micropython/ports/webassembly/index.html This is very convenient to prototype new screens</p>"},{"location":"micropython/lvgl/#simulator-examples","title":"Simulator Examples","text":""},{"location":"micropython/lvgl/#button","title":"button","text":"<pre><code># Initialize\nimport display_driver\nimport lvgl as lv\ndisp = lv.display_get_default()\ndisp.set_resolution(296,240)\n\n# Create a button with a label\nscr = lv.obj()\n\nbtn = lv.button(scr)\nbtn.align(lv.ALIGN.CENTER, 0, 0)\nlabel = lv.label(btn)\nlabel.set_text('Hello World!')\n\nlv.screen_load(scr)\n</code></pre>"},{"location":"micropython/lvgl/#button-in-a-class-with-callback-remembering-state","title":"button in a class with callback, remembering state","text":"<pre><code># Initialize\n\nimport display_driver\nimport lvgl as lv\n\ndisp = lv.display_get_default()\ndisp.set_resolution(296,240)\n\nclass CounterBtn:\n    def __init__(self):\n        screen = lv.screen_active()\n\n        screen.set_style_bg_color(lv.palette_darken(lv.PALETTE.GREY, 4), lv.PART.MAIN)\n\n        self.btn = lv.button(screen)\n        self.btn.align(lv.ALIGN.CENTER, 0, 0)\n\n        self.lbl = lv.label(self.btn)\n        self.lbl.set_text(\"Button\")\n\n        self.cnt = 0\n\n        self.btn.add_event_cb(self.btn_cb, lv.EVENT.ALL, None)\n\n    def btn_cb(self, evt):\n        code = evt.get_code()\n\n        if code == lv.EVENT.CLICKED:\n            self.cnt += 1\n            print(self.cnt)\n\n            self.lbl.set_text(\"Button: \" + str(self.cnt))\n\n\ncounter_btn = CounterBtn()\n</code></pre>"},{"location":"micropython/lvgl/#wifi-config-screen","title":"wifi-config screen","text":"<pre><code># Initialize\n\nimport display_driver\nimport lvgl as lv\n\ndisp = lv.display_get_default()\ndisp.set_resolution(296,240)\n\n\n\n\nclass TextArea:\n    def __init__(self, screen):\n        self._screen = screen\n        self.ta = lv.textarea(screen)\n        self.ta.add_event_cb(self._ta_event_cb, lv.EVENT.ALL, None)\n        self._kb = None\n\n    def _ta_event_cb(self, event):\n        code = event.get_code()\n\n        if code == lv.EVENT.CLICKED or code == lv.EVENT.FOCUSED:\n            if self._kb is None:\n                # create keyboard\n                self._kb = lv.keyboard(self._screen)\n                self._kb.set_size(self._screen.get_width(), int(self._screen.get_height()/2) )\n                self._kb.align_to(self.ta, lv.ALIGN.OUT_BOTTOM_MID, 0, 0)\n                self._kb.set_x(0)\n                self._kb.set_textarea(self.ta)\n                self._kb.add_event_cb(self._kb_event_cb, lv.EVENT.ALL, None)\n\n        elif code == lv.EVENT.DEFOCUSED:\n            if self._kb is not None:\n                self._kb.delete()\n                self._kb = None\n\n    def _kb_event_cb(self, event):\n        code = event.get_code()\n        if code == lv.EVENT.READY or code == lv.EVENT.CANCEL:\n            self.ta.send_event(lv.EVENT.DEFOCUSED, self.ta)\n\n\n\n\nclass ButtonLabel:\n    def __init__(self, screen, label, cb):\n        btn = lv.button(screen)\n        self.btn = btn\n        btn.set_height(30)\n        lbl = lv.label(btn)\n        lbl.set_text(label)\n        lbl.align(lv.ALIGN.CENTER, 0, 0)\n        btn.add_event_cb(self._bt_event_cb, lv.EVENT.CLICKED, None)\n        self.cb = cb\n\n    def _bt_event_cb(self, event):\n        # code = event.get_code()\n        self.cb()\n\n\n\nclass WifiScreen:\n    def __init__(self):\n        self._screen = lv.obj()\n        self._construct()\n\n    def load(self):\n        lv.screen_load(self._screen)\n\n    def _save_cb(self):\n        ssid = self.ss_ta.ta.get_text()\n        key = self.key_ta.ta.get_text()\n        print(f\"{ssid=}, {key=}\")\n        # TODO save\n\n    def _cancel_cb(self):\n        print(\"Cancel\")\n        #home_screen = fri3d.screens.home.HomeScreen()\n        #home_screen.load()\n\n    def _construct(self):\n        screen = self._screen\n\n        # title\n        title = lv.label(screen)\n        title.set_text(\"Wifi Configuration\")\n        title.align(lv.ALIGN.TOP_MID, 0, 0)\n\n        # ssid textarea\n        ss_ta = TextArea(screen)\n        self.ss_ta = ss_ta\n        ss_ta.ta.set_text(\"\")\n        ss_ta.ta.set_one_line(True)\n        ss_ta.ta.set_width(lv.pct(50))\n        ss_ta.ta.set_pos(100, 20)\n\n        # ssid label\n        ss_lbl = lv.label(screen)\n        ss_lbl.set_text(\"SSID:\")\n        ss_lbl.align_to(ss_ta.ta, lv.ALIGN.OUT_LEFT_MID, -5, 0)\n\n        # key textarea\n        key_ta = TextArea(screen)\n        self.key_ta = key_ta\n        key_ta.ta.set_text(\"\")\n        key_ta.ta.set_password_mode(True)\n        key_ta.ta.set_one_line(True)\n        key_ta.ta.set_width(lv.pct(50))\n        key_ta.ta.set_pos(100, 60)\n\n        # key label\n        key_lbl = lv.label(screen)\n        key_lbl.set_text(\"Key:\")\n        key_lbl.align_to(key_ta.ta, lv.ALIGN.OUT_LEFT_MID, -5, 0)\n\n        # save button\n        sv = ButtonLabel(screen, lv.SYMBOL.OK + \" Save\", self._save_cb)\n        sv.btn.align(lv.ALIGN.RIGHT_MID, -5, 0)\n\n        # cancel button\n        cancel = ButtonLabel(screen, lv.SYMBOL.CLOSE + \" Cancel\", self._cancel_cb)\n        cancel.btn.align(lv.ALIGN.LEFT_MID, 5, 0)\n\n\n\nw = WifiScreen()\nw.load()\n</code></pre>"},{"location":"micropython/lvgl/#canvas","title":"canvas","text":"<p>red border around a golden background <pre><code># Initialize\nimport display_driver\nimport lvgl as lv\ndisp = lv.display_get_default()\ndisp.set_resolution(296,240)\n\nscr = lv.screen_active()\n\nbuf = lv.draw_buf_create(scr.get_width(),scr.get_height(),lv.COLOR_FORMAT.RGB565, lv.STRIDE_AUTO)\ncanvas = lv.canvas(scr)\ncanvas.set_draw_buf(buf)\ncanvas.center()\n\nlayer = lv.layer_t()\ncanvas.init_layer(layer)\n\ndsc = lv.draw_rect_dsc_t()\ndsc.bg_color = lv.color_hex(0xffbf00)\ndsc.bg_opa = lv.OPA.COVER\n\ndsc.border_color = lv.palette_main(lv.PALETTE.RED)\ndsc.border_width = 2\ndsc.border_side = lv.BORDER_SIDE.TOP | lv.BORDER_SIDE.LEFT | lv.BORDER_SIDE.RIGHT | lv.BORDER_SIDE.BOTTOM\ndsc.border_opa = lv.OPA.COVER\n\ndsc.radius = 61\n\na = lv.area_t()\na.x1 = 0\na.y1 = 0\na.x2 = 295\na.y2 = 239\n\nlv.draw_rect(layer, dsc, a)\n\ncanvas.finish_layer(layer)\n</code></pre></p>"},{"location":"micropython/lvgl/#real-examples","title":"real examples","text":""},{"location":"micropython/lvgl/#load-png-image","title":"load png image","text":"<pre><code># load fri3d_logo-min.png\npng = open('fri3d_logo-min.png', 'rb')\ndata = png.read()\npng.close()\n\nimg = lv.image(lv.screen_active())\n\nimgd = lv.image_dsc_t()\nimgd.header.cf = lv.COLOR_FORMAT.ARGB8888\nimgd.header.w = 240\nimgd.header.h = 240\nimgd.data = data\nimgd.data_size = len(data)\n\nimg.set_src(imgd)\n\nimg.align(lv.ALIGN.CENTER, 0, 0)\n</code></pre>"},{"location":"noisycricket/","title":"Noisy Cricket","text":""},{"location":"noisycricket/#assembly-photos","title":"Assembly photos","text":"<ol> <li> <p>All components neatly packaged </p> </li> <li> <p>Spread out in order of soldering </p> </li> <li> <p>Component side of the pcb is where the fri3d logo is  </p> </li> <li>33 Ohm (blue body and orange,orange.black colored bands) resistor on top  </li> <li> <p>120 Ohm (beige body and black,red,black colored bands) risistor on bottom 2 resistors soldered </p> </li> <li> <p>NPN transistor 2N3904 with flat side to the left (back of noisy cricket) </p> </li> <li> <p>Electrolytic capacitor (33 microFarad) Mind the polarity: long leg is positive, short leg is negative, white marking on the body is negative There are 2 holes for positive and 2 holes for negative, choose best fitting ones </p> </li> <li> <p>Pin header soldered on the bottom 2 orientations are possible:</p> </li> <li>on the bottom: this results in an upright position when mounted on the fri3d2024 badge</li> <li> <p>at the back: this results in a front facing position when mounted on the fri3d2024 badge  </p> </li> <li> <p>Ready to solder the LED Mind the polarity: long leg is positive, short leg is negative, flat side on the body is negative </p> </li> <li> <p>LED soldered Mind the polarity: positive (long leg) on the bottom, negative on top (short leg, flat side on the body) </p> </li> <li> <p>Overview pictures of soldered Noisy Cricket  </p> </li> <li> <p>Noisy Cricket mounted on the fri3d2024 badge Mounted with the pin header soldered on the bottom  </p> </li> </ol> <p>Mounted with the pin header soldered on the back  </p>"},{"location":"onboarding/","title":"Onboarding documentation","text":""},{"location":"onboarding/#badge","title":"Badge","text":""},{"location":"onboarding/#flamingo","title":"Flamingo","text":"<p>AKA BFG9000 (Big Flamingo Gun)</p> <p></p>"},{"location":"onboarding/#mini-blaster","title":"Mini-blaster","text":"<p>AKA Noisy Cricket</p> <p></p>"},{"location":"onboarding/#communicator","title":"Communicator","text":""},{"location":"platformio/","title":"PlatformIO","text":""},{"location":"platformio/#visual-studio-code","title":"Visual Studio Code","text":"<p>You can download VS Code from https://code.visualstudio.com/. Don't worry about what other extensions you need, you can easily install them whenever you need them.</p>"},{"location":"platformio/#platformio-extension","title":"PlatformIO extension","text":"<ol> <li>Inside Visual Studio Code, go to the extensions tab. (CTRL+SHIFT+X)</li> <li>In the search bar, type \"platformio\"</li> <li>Install the one with the orange alien icon</li> </ol>"},{"location":"platformio/#hello-world","title":"Hello World","text":"<ol> <li>go to PlatformIO window (click on the alien face in the left column)</li> <li>Choose \"New Project\"<ol> <li>Alternatively, if you see the \"PIO Home\" window, you can click \"+ new project\" there.</li> </ol> </li> <li>For board, choose \"esp32-s3-devkitc-1\". PlatformIO will start downloading necessary libraries</li> <li>Open platformio.ini - you should see the following: <pre><code>    [env:esp32-s3-devkitc-1]\n    platform = espressif32\n    board = esp32-s3-devkitc-1\n    framework = arduino\n</code></pre></li> <li>add the following lines at the bottom: <pre><code>    board_build.arduino.memory_type = qio_opi \n    board_build.partitions = default_16MB.csv\n    board_upload.flash_size = 16MB\n    monitor_speed = 115200\n    lib_deps = bodmer/TFT_eSPI@^2.5.33\n    build_flags = \n        -DBOARD_HAS_PSRAM # N16R8V has PSRAM\n        -DARDUINO_USB_MODE=1 # necessary for serial port\n        -DARDUINO_USB_CDC_ON_BOOT=1 # necessary for serial port\n</code></pre></li> </ol>"},{"location":"platformio/#examples-in-github","title":"Examples in GitHub","text":"<p>https://github.com/Fri3dCamp/badge_2024_arduino/tree/main/examples/platformio%20basic%20examples</p> <p>If you just want to try all examples:</p> <ol> <li>In GitHub, goto https://github.com/Fri3dCamp/badge_2024_arduino</li> <li>Click \"Fork\"</li> <li>You now have the same repository, but in your own profile</li> <li>Click the green button <code>&lt;&gt; Code</code></li> <li>copy the URL you see in the pop-up</li> <li>Open the Git Bash CLI where you want to create the forked repository</li> <li>Type <code>git clone</code> and paste the URL from the Github repository</li> </ol>"},{"location":"platformio/#your-own-code-on-github","title":"Your own code on GitHub","text":"<ol> <li>Download GIT from https://git-scm.com/downloads</li> <li>Create an account on https://github.com</li> <li>At the top of the screen, click \"+\", click \"New repository\"</li> <li>Follow the GitHub instructions to clone your repository to your local hard drive</li> <li>Code away!</li> <li>Open the Git Bash CLI in the root folder of your repository</li> <li><code>git add .</code></li> <li><code>git commit -m \"cool new program\"</code></li> <li><code>git push</code></li> <li>Check that your code has arrived on GitHub</li> </ol>"},{"location":"platformio/#your-code-in-the-fri3d-camp-repository","title":"Your code in the Fri3d Camp repository","text":"<ol> <li>In GitHub, goto https://github.com/Fri3dCamp/badge_2024_arduino</li> <li>Click \"Fork\"</li> <li>You now have the same repository, but in your own profile</li> <li>Click the green button <code>&lt;&gt; Code</code></li> <li>Copy the URL you see in the pop-up</li> <li>Open the Git Bash CLI where you want to create the forked repository</li> <li>Type <code>git clone</code> and paste the URL from the Github repository</li> </ol> <p>So far, the instructions are exactly the same as for downloading the examples</p> <ol> <li>In github click on <code>main</code> to create a new branch</li> <li>In the search bar, type a name of your choice, e.g. <code>newexample</code></li> <li>Click <code>create branch newexample</code> from main</li> <li>Open the Git Bash CLI in the root folder of your repository</li> <li><code>git checkout -b newexample</code></li> <li>Add your example</li> <li><code>git add .</code></li> <li><code>git commit -m \"I created a new example\"</code></li> <li><code>git push</code></li> <li>in GitHub, click <code>compare and pull request</code></li> <li>Add a nice description,</li> <li>Click <code>Create pull request</code></li> </ol>"},{"location":"sweet4x4/","title":"Sweet 4x4","text":""},{"location":"sweet4x4/#features","title":"Features","text":"<p>The sweet 4x4 macropad is at its 3rd iteration. This tiume you'll use a LANA TNY (or any other XIAO / QtPy compatible board) at the heart of this macropad.  You can opt for 16 keys or 15 keys and a rotary encoder.</p> <p></p>"},{"location":"sweet4x4/#step-by-step-assembly-guide","title":"Step by step assembly guide","text":""},{"location":"sweet4x4/#overview","title":"Overview","text":"<p>The package you received has everything you need to build your own Sweet 4x4.</p> <ul> <li>15 sockets</li> <li>15 switches</li> <li>16 diodes</li> <li>6 WAS2812 LEDs</li> <li>2 capacitors</li> <li>1 LANA TNY</li> <li>1 pink PCB</li> <li>Screws and standoffs <code>HOW MANY?</code></li> </ul> <p></p>"},{"location":"sweet4x4/#sockets","title":"Sockets","text":"<p>Let's start off with the lowest components. In this case the key sockets. Place the sockets in the holes and solder the 2 SMD pads on the sides. Do this 15 times unless you do not want an encoders, then you can opt for 16 sockets and keys. (For those not wanting sockets, you can also solder your keys directly on the PCB)</p> <p></p>"},{"location":"sweet4x4/#diodes","title":"Diodes","text":"<p>The 16 diodes should be bent to properly fit in the PCB. Therefor the 2 bottom corners are designed as dedicated to bending these parts. Once all the diodes are bent, you can start soldering them in the 2 circles next. The black line on the diode (the cathode) should be facing outward.</p> <p> </p>"},{"location":"sweet4x4/#lana-tny","title":"LANA TNY","text":"<p>You can solder theLANA TNY module using the supplied through hole pins OR you can SMD mount it for the lowest profile solution. When opting for the surface mount solution, you can use some of the pins to properly align the module before soldering as shown below.</p> <p></p>"},{"location":"sweet4x4/#ws2812-leds","title":"WS2812 LEDs","text":"<p>Solder 6 WS2812 RGB LEDs on the bottom as indicated in the pictures below. Don't press the LEDs down too far to prevent damage to the LED. Also prevent shorting the LED pins with the SMD sockets pins by not bending it all the way to the board as shown in the pictures below.</p> <p> </p>"},{"location":"sweet4x4/#capacitors","title":"Capacitors","text":"<p>In order to reduce the total height of the keyboard, you should bend the capacitor before soldering it.</p> <p></p>"},{"location":"sweet4x4/#encoder","title":"Encoder","text":"<p>If you like a rotary encoder, place one in the upper left corner of the key matrix and sodler the 7 pins (5 smaller and 2 bigger ones). The larger pins, used for mechanical strength, might require a lot of solder to fille the holes.</p> <p></p>"},{"location":"sweet4x4/#switches","title":"Switches","text":"<p><code>INSERT IMAGE WITH THE PLEXI PLATE</code></p>"},{"location":"sweet4x4/#casing","title":"Casing","text":"<p>Screws? Spacers? Plexi?</p>"},{"location":"sweet4x4/#keycaps","title":"Keycaps","text":"<p>Snap on the keycaps of your choice.</p> <p></p>"},{"location":"sweet4x4/#n-key-rollover","title":"N-key rollover","text":"<p>A keyboard with n-key rollover, or abbreviated as NKRO, has the ability to scan each button press individually, as opposed to having the PC do it. As a result, every pressed button, or key, is noted, even if you\u2019re pressing a bunch of keys simultaneously.</p> <p>Sometimes you'll see the \"n\" in n-key rollover replaced with a number. That number tells you how many keys you can press simultaneously with the keyboard being aware. For example, if your keyboard has 6-key rollover, you can press six keys at once with successful input. N-key rollover is particularly relevant/helpful for gaming keyboards.</p> <p>Not all keyboards come with n-key rollover, as implementing the feature comes with certain cost and design challenges.</p> <p>To enable n-key rollover on this macropad, break off the 2 top corners to break the short circuit and use the diodes.</p>"},{"location":"sweet4x4/#firmware","title":"Firmware","text":"<p><code>INSERT INFO</code></p>"},{"location":"nl/","title":"Fri3d Camp 2024 Badge","text":"<p>Proficiat met je coole nieuwe badge! Maar wat kan je er zoal mee doen? ;-)</p>"},{"location":"nl/#spelen","title":"Spelen!","text":"<p>Je moet geen programmeer-goochelaar te zijn om leuke dingen te doen! Op de Onboarding pagina zie je de dingen die standaard al ingebouwd zijn.</p> <p></p>"},{"location":"nl/#programmeren","title":"Programmeren","text":"<p>Om te programmeren (en bugs te vermijden) heb je de juiste tools nodig...</p> <p></p> <ul> <li>Je kan C++ in de Arduino editor, of Visual Studio Code</li> <li>Wie liever Python programmeert, kan gelijk welke tekst editor gebruiken, maar Visual Studio Code geeft je wel wat extras.</li> <li>Om je badge te laten babbelen met je smart home is er esphome. Je kan de command line gebruiken of het esphome dashboard.</li> <li>Als je liever niet typt, kan je blokjes slepen met bipes, een beetje zoals Scratch</li> </ul>"},{"location":"nl/#reset-default-firmware","title":"Reset Default Firmware","text":"<p>Zie Hoe resetten</p>"},{"location":"nl/reset/","title":"Flashing","text":"<p>Als je programmeer-avonturen bizarre resultaten hebben opgeleverd, kan het zijn dat je wil teruggaan naar de originele software...</p>"},{"location":"nl/reset/#fri3d-camp-reset-booth","title":"Fri3d Camp Reset Booth","text":"<p>Tijdens Fri3d Camp, bij de \"Badge EHBO\" helpen we jou met plezier terug op weg! Zoek naar de \"badge reset firmware\" booth op het kamp. We hebben alles voorzien :-)</p>"},{"location":"nl/reset/#web-interface","title":"Web interface","text":"<p>De online flasher app werkt enkel met browsers gebaseerd op chrome based (Chrome, Edge) (niet Firefox, Safari).</p> <ol> <li>download meest recente zip file van https://github.com/tomvanbraeckel/retro-go-fri3d/releases</li> <li>ga naar https://fri3d-flasher.vercel.app/</li> <li>klik icoon om de zip file te uploaden die je zonet hebt gedownload</li> <li>klik \"begin te flashen\" knop</li> </ol> <p>Als het flashen mislukt omdat je badge elke zoveel seconden reset, kan je ze als volgt \"forceren\" om te luisteren naar een nieuwe upload:</p> <ol> <li>Klik en houd de \"start\" knop (Op ESP32 heet dit de \"boot button\")</li> <li>Klik en laat los de \"reset\" knop</li> <li>Je badge staat nu in \"download\" mode tot je opnieuw reset duwt</li> </ol> <p>Je badge start nu in de default Fri3d App.</p>"},{"location":"nl/reset/#esp-idf","title":"ESP-IDF","text":"<p>This is the complicated version. Only worth it if the web flasher failed.</p> <ol> <li>Als je badge om de paar seconden spontaan reset, kan je ze als volgt \"forceren\" om te luisteren naar een nieuwe upload:<ol> <li>Klik en houd de \"start\" knop (Op ESP32 heet dit de \"boot button\")</li> <li>Klik en laat los de \"reset\" knop</li> <li>Je badge staat nu in \"download\" mode tot je opnieuw reset duwt</li> </ol> </li> <li>installeer ESP-IDF https://docs.espressif.com/projects/esp-idf/en/stable/esp32/get-started/index.html#installation</li> <li>Download de meest recente firmware op https://github.com/Fri3dCamp/badge_2024_micropython</li> <li>in de command line interface, type:<pre><code>python -m esptool -p (PORT) -b 460800 --before default_reset --after no_reset --chip esp32s3 write_flash --flash_mode dio --flash_size 16MB --flash_freq 80m 0x0 bootloader.bin 0x8000 partition-table.bin 0x1d000 ota_data_initial.bin 0x30000 micropython.bin\n</code></pre> </li> </ol>"},{"location":"nl/communicator/#communicator-eigenschappen","title":"Communicator eigenschappen","text":"<p>The communicator bestaat uit:</p> <ul> <li>QWERTY toetsenbord met achtergrond verlichting ontworpen door Solder Party</li> <li>op RISC-V gebaseerd microcontroller module LANA TNY</li> <li>TDK ICS43434 microfoon</li> <li>Analog Devices MAX98357A DAC met versterker</li> <li>kleine luidspreker</li> </ul> <p>Je kan het toetsenbord ook als USB toetsenbord gebruiken, echter sluit de USB kabel niet aan wanneer het bord aan de badge hangt!</p> <p>De ontwerp- en bronbestanden kan je terugvinden in de GitHub repository</p> <p></p>"},{"location":"nl/communicator/#stap-voor-stap-assemblage-handleiding","title":"Stap voor stap assemblage handleiding","text":""},{"location":"nl/communicator/#alle-componenten-netjes-verpakt","title":"Alle componenten netjes verpakt","text":"<p>Het pakje dat je ontvangen hebt bevat alles wat je nodig hebt om de communicator add-on te bouwen</p> <ul> <li>Communicator printplaat</li> <li>Roze afdekplaat</li> <li>4 x 16mm lange plastieken pin</li> <li>4 x 2mm lange plastieken pin</li> <li>luidspreker</li> <li>siliconen toetsenbord</li> <li>2 x 6 pin extra lange pinnen</li> </ul> <p></p>"},{"location":"nl/communicator/#monteer-de-luidspreker","title":"Monteer de luidspreker","text":"<p>Verwijder de plastieken laag om de luidspreker op de printplaat te kleven. Soldeer de 2 draden op de printplaat. De rode draad moet naar het soldeervlak gaan dat gemarkeerd is met een <code>+</code></p> <p> </p>"},{"location":"nl/communicator/#soldeer-de-lange-pinnen","title":"Soldeer de lange pinnen","text":"<p>Plaatse de langen pinnen aan de zijde met alle componenten. Je kan een andere vrouwelijke connector (of zelfs de badge) gebruiken om de 2 losse pinnen stroken netje gealigneerd te houden tijdens het solderen.</p> <p></p>"},{"location":"nl/communicator/#monteer-het-toetsenbord","title":"Monteer het toetsenbord","text":"<p>Duw de 2mm lange plastieken pinnetjes in de roze cover. Let het siliconen toetsenbord er in en klik het geheel op de communicator printplaat.</p> <p> </p>"},{"location":"nl/communicator/#connecteer-de-communicator-met-de-badge","title":"Connecteer de communicator met de badge","text":"<p>Duw de 16mm lange plastieken pinnetjes in de 4 gaten die overeenkomen met de badge. Verwijder de beschermende achterplaat en duw de communicator op zijn plaats.</p> <p> </p>"},{"location":"nl/communicator/#gebruik","title":"Gebruik","text":"<p>Het toetsenbord doet zich voor als een HID input toestel. met de <code>Fn</code> toets kan je speciale functies activeren:</p> <ul> <li><code>Fn+Rood Vierkant</code>: Maak de LED op LANA rood</li> <li><code>Fn+Oranje Driehoek</code>: Maak de LED op LANA oranje</li> <li><code>Fn+Geel Fri3d logo</code>: Maak de LED op LANA geel</li> <li><code>Fn+Groene Cirkel</code>: Maak de LED op LANA groen</li> <li><code>Fn+Blauwe Klaverblad</code>: Maak de LED op LANA blauw</li> <li><code>Fn+Paarse Ruit</code>: Maak de LED op LANA paars</li> <li><code>Fn+Solder Party</code>: Zet de LED op LANA uit</li> <li><code>Fn+Backspace</code>: Delete</li> <li><code>Fn+Omhoog</code>: Page Up</li> <li><code>Fn+Omlaag</code>: Page Down</li> <li><code>Fn+Links</code>: Home</li> <li><code>Fn+Rechts</code>: End</li> <li><code>Fn+Spatiebalk</code>: schakel de achtergrond verlichting aan/uit</li> <li><code>Fn+Rechtse Shift</code>: Schakel Caps Lock</li> </ul>"},{"location":"nl/communicator/#firmware-functies","title":"Firmware functies","text":"<p>De firmware stuurt HID pakketten (8 bytes) uit op USB, I2C (adres <code>0x38</code>) en UART.</p> <p>De eerste byte geeft aan welke modificatietoetsen zijn ingedrukt:</p> Bit Modifier Key 0 LINKSE CTRL 1 LINKSE SHIFT 2 LINKSE ALT 3 LINKSE GUI 4 RECHTSE CTRL 5 RECHTSE SHIFT 6 RECHTSE ALT 7 RECHTSE GUI <p>De tweede byte is gereserveerd, de overige 6 bytes kunnen een HID-sleutelcode bevatten.</p>"},{"location":"nl/flamingo/#kenmerken","title":"Kenmerken","text":"<p>De flamingo blaster is opgebouwd rond volgende basiscomponenten:</p> <ul> <li>een IR LED</li> <li>2 IR-ontvangers</li> <li>4 WS2812 LED's</li> <li>RISC-V-gebaseerd microcontrollerbord LANA TNY</li> </ul> <p>Sluit de USB-kabel niet aan wanneer deze is aangesloten op de badge!</p> <p></p>"},{"location":"nl/flamingo/#stapsgewijze-montagehandleiding","title":"Stapsgewijze montagehandleiding","text":""},{"location":"nl/flamingo/#alle-componenten-netjes-verpakt","title":"Alle componenten netjes verpakt","text":"<p>Het pakket dat u hebt ontvangen, bevat alles wat u nodig hebt om uw eigen flamingo blaster te bouwen.</p> <ul> <li>1 IR LED</li> <li>1 team selector switch</li> <li>1 grote blauwe condensator</li> <li>1 buzzer</li> <li>1 trigger pushbutton</li> <li>1 lange strip pin headers (in twee\u00ebn te splitsen)</li> <li>1 enkele pin header</li> <li>1 MOSFET</li> <li>1 LANA TNY</li> <li>1 roze PCB</li> <li>1 badge link kabel</li> <li>2 IR ontvangers</li> <li>2 weerstanden</li> <li>2 badge link connectoren</li> <li>3 gele condensatoren (100nF)</li> <li>4 WS2812 LED's</li> </ul> <p></p>"},{"location":"nl/flamingo/#begin-met-solderen","title":"Begin met solderen","text":"<p>Er is geen verkeerde volgorde om de onderdelen te solderen, maar we raden aan om eerst met de laagste componenten te beginnen.</p>"},{"location":"nl/flamingo/#weerstanden","title":"Weerstanden","text":"<p>Het pakket bevat een grotere 33R weerstand en een kleinere 1k weerstand.</p> <p></p>"},{"location":"nl/flamingo/#teamschakelaar-en-luidspreker","title":"Teamschakelaar en luidspreker","text":"<p>De volgende componenten met een laag profiel zijn de zoemer en de teamschakelaar. Monteer de schakelaar met de actuator weg van de PCB gericht.</p> <p></p>"},{"location":"nl/flamingo/#ir-led","title":"IR-LED","text":"<p>De infrarood-LED heeft wel een polariteit. Als u hem verkeerd om monteert, werkt de blaster niet. De lange pin van de LED moet in het vierkante gat met het <code>+</code>-symbool ernaast. Zorg ervoor dat u wat ruimte overlaat om de LED naar voren te buigen (of nog beter, buig hem voordat u hem soldeert!)</p> <p></p> <p></p>"},{"location":"nl/flamingo/#ir-ontvangers","title":"IR-ontvangers","text":"<p>De montagerichtingen van de 2 IR-ontvangers worden aangegeven door een pijl. Deze pijl wijst in de richting waarin de pinnen moeten gaan.</p> <p></p> <p></p>"},{"location":"nl/flamingo/#rgb-leds","title":"RGB-LED's","text":"<p>De RGB-LED's hebben 4 aansluitingen, de langste aansluiting moet in het gat met de letter <code>c</code>. Buig de LED na het plaatsen maar voor u gaat solderen. Zo kunt u de uitlijning enigszins aanpassen voordat u ze op hun plaats bevestigt.</p> <p></p> <p></p>"},{"location":"nl/flamingo/#triggerknop","title":"Triggerknop","text":"<p>Als u rechtshandig bent, soldeert u de drukknop aan de zijkant met alle andere componenten.</p> <p></p>"},{"location":"nl/flamingo/#lana-tny-module","title":"LANA TNY-module","text":"<p>Gebruik de grote en de losse enkele pinheader om de LANA TNY-module te solderen. Breek de lange pinheader in 2 voor de zijkanten. Plaats de pinnen in de flamingo en lijn de LANA-module er bovenop uit. Soldeer de pinnen afwisselend om te voorkomen dat de pinheader smelt.</p> <p></p> <p></p>"},{"location":"nl/flamingo/#condensatoren","title":"Condensatoren","text":"<p>De grote blauwe condensator, net als de IR-LED, heeft een lange pin die de anode van dit onderdeel aangeeft. Deze langere pin moet in het gat met het <code>+</code>-symbool worden geplaatst.</p> <p>De kleinere gele condensatoren hebben geen polriteit en kunnen op beide manieren worden gemonteerd.</p> <p></p> <p></p>"},{"location":"nl/flamingo/#badge-linkconnector","title":"Badge-linkconnector","text":"<p>Het laatste onderdeel is de badge-linkconnector. Deze 3,5 mm audio-aansluiting is aan dezelfde kant gesoldeerd als alle andere componenten</p> <p></p>"},{"location":"nl/flamingo/#afgewerkte-blaster","title":"Afgewerkte blaster","text":"<p>Als alles volgens plan verloopt, zou u nu een functionele blaster moeten hebben.</p> <p></p>"},{"location":"nl/flamingo/#monteer-de-connector-op-uw-badge","title":"Monteer de connector op uw badge","text":"<p>Nu hoeft u alleen nog maar de badge-linkconnector aan uw badge toe te voegen. Monteer deze connector aan de achterkant van de badge (dezelfde kant als de draadloze module en de batterij).</p> <p></p> <p></p> <p>Let op dat er geen kortsluiting is tussen de voorste pin en de decoratie van de badge!</p> <p></p>"},{"location":"nl/flamingo/#opmerkingen","title":"Opmerkingen","text":"<p>Firmware-updates kunnen worden geflasht via het badge-flashstation in het soldeergebied.</p> <p>Hardware-ontwerpbestanden en firmware zijn te vinden in de GitHub-repository.</p>"},{"location":"nl/flamingo/programming/","title":"Programming","text":"<p>Om de blaster (flamingo) te programmeren kan je mounriver IDE of embeetle gebruiken. De eerste is een ide op basis van eclipse gereleased door de chipmaker WCH. Deze werkt op windows en er is een versie voor linux en ik dacht mac maar de laatste 2 lopen wat achter. Mounriver geeft op veel systemen ook valse meldingen van virussen en schend de gpl licentie voorwaardes van eclips. Een mooier alternatief is embeetle https://embeetle.com/ dit is een IDE van Belgische makelij. Deze is niet open source maar produceert wel een open toolchain bij het maken van een nieuw project. Lana kan je met embeetle programmeren via de usb connector maar ook met de wchlink modulle, deze geeft extra debugging opties. De makers van embeetle zijn ook zo lief geweest om het LANA bordje en heel knappe documentatie toe te voegen. https://embeetle.com/#supported-hardware/wch/boards/lana-tny-01 . Als je zelf aan de slag gaat met de blaster/LANA TNY dan moet je 1 ding letten (onafhankelijk van de ide) dat is dat LANA geen externe klok heeft en de interne klok (HSI) moet gebruiken, dit staat ook zo in de default sketch van embeetle. Als je per ongeluk je LANA bordje \"bricked\" kan je die meestal unbricken via usb of door de power reset feature te gebruiken van de wchisptool.</p>"},{"location":"nl/platformio/#visual-studio-code","title":"Visual Studio Code","text":"<p>Hier kan je VS Code downloaden: https://code.visualstudio.com/. Maak je geen zorgen als tijdens de installatie gevraagd wordt welke extensie je wil installeren. De nodige extensies kan je makkelijk achteraf installeren.</p>"},{"location":"nl/platformio/#platformio-extensie","title":"PlatformIO extensie","text":"<ol> <li>In Visual Studio Code, ga naar de \"extensions\" tab. (CTRL+SHIFT+X)</li> <li>In de search bar, type \"platformio\"</li> <li>Installeer die met de oranje alien icon</li> </ol>"},{"location":"nl/platformio/#hello-world","title":"Hello World","text":"<ol> <li>open het PlatformIO window (klik het alien icoon in de linker kolom)</li> <li>Kies \"New Project\"<ol> <li>Als je het \"PlatformIO home\" window ziet, kan je ook op de \"+ new project\" knop klikken.</li> </ol> </li> <li>Bij een nieuw project moet je\"esp32-s3-devkitc-1\" als board kiezen. PlatformIO zal nu een hoop libraries downloaden. Dat kan eventjes duren.</li> <li>Open platformio.ini - daar zou je het volgende moeten vinden: <pre><code>    [env:esp32-s3-devkitc-1]\n    platform = espressif32\n    board = esp32-s3-devkitc-1\n    framework = arduino\n</code></pre></li> <li>voeg volgende lijntjes onderaan toe: <pre><code>    board_build.arduino.memory_type = qio_opi \n    board_build.partitions = default_16MB.csv\n    board_upload.flash_size = 16MB\n    monitor_speed = 115200\n    lib_deps = bodmer/TFT_eSPI@^2.5.33\n    build_flags = \n        -DBOARD_HAS_PSRAM # N16R8V has PSRAM\n        -DARDUINO_USB_MODE=1 # necessary for serial port\n        -DARDUINO_USB_CDC_ON_BOOT=1 # necessary for serial port\n</code></pre></li> </ol>"},{"location":"nl/platformio/#voorbeeld-code-in-github","title":"Voorbeeld code in GitHub","text":"<p>https://github.com/Fri3dCamp/badge_2024_arduino/tree/main/examples/platformio%20basic%20examples</p> <p>Om de hele mikmak te downloaden:</p> <ol> <li>Surf naar https://github.com/Fri3dCamp/badge_2024_arduino</li> <li>Klik \"Fork\"</li> <li>De hele repository staat nu identiek in je eigen account op github</li> <li>Klik op de groene knop <code>&lt;&gt; Code</code></li> <li>CTRL-C de URL die je vindt in de pop-up</li> <li>Open je Git Bash CLI in de folder waar je je code lokaal wil plaatsen</li> <li>Type <code>git clone</code> en CTRL-V URL from the Github repository</li> </ol>"},{"location":"nl/platformio/#your-own-code-on-github","title":"Your own code on GitHub","text":"<ol> <li>Download GIT vanop https://git-scm.com/downloads</li> <li>Creeer je account op https://github.com</li> <li>Bovenaan het scherm, klik \"+\", dan \"New repository\"</li> <li>Volg de instructies op de GitHub pagina om de repository te clonen naar je eigen harde schijf.</li> <li>Coderen maar!</li> <li>Als je klaar bent, open de Git Bash CLI in de root folder van je repository</li> <li><code>git add .</code></li> <li><code>git commit -m \"cool new program\"</code></li> <li><code>git push</code></li> <li>Check op de Github website dat je nieuwe code is gearriveerd</li> </ol>"},{"location":"nl/platformio/#your-code-in-the-fri3d-camp-repository","title":"Your code in the Fri3d Camp repository","text":"<ol> <li>Surf naar https://github.com/Fri3dCamp/badge_2024_arduino</li> <li>Klik \"Fork\"</li> <li>De hele repository staat nu identiek in je eigen account op github</li> <li>Klik op de groene knop <code>&lt;&gt; Code</code></li> <li>CTRL-C de URL die je vindt in de pop-up</li> <li>Open je Git Bash CLI in de folder waar je je code lokaal wil plaatsen</li> <li>Type <code>git clone</code> en CTRL-V URL from the Github repository</li> </ol> <p>Tot nu waren de instructies identiek aan het downloaden van de voorbeelden</p> <ol> <li>In githubm klik <code>main</code> om een nieuwe branch aan te maken</li> <li>In de zoekbar, typ een nieuwe naam naar keuze, bv. <code>mijneigenvoorbeeld</code></li> <li>Klik <code>create branch mijneigenvoorbeeld</code> from main</li> <li>Open the Git Bash CLI in the root folder of your repository</li> <li><code>git checkout -b newexample</code></li> <li>Maak nu de code/het project voor je eigen voorbeeld. Daarna:</li> <li><code>git add .</code></li> <li><code>git commit -m \"nieuw voorbeeld toegevoegd\"</code></li> <li><code>git push</code></li> <li>in GitHub, klik <code>compare and pull request</code></li> <li>Voeg een goede  beschrijving toe van wat je voorbeeld doet,</li> <li>Klik <code>Create pull request</code></li> </ol>"}]}